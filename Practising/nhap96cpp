#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
int n, m;
int color[1100];

bool isBipartite(int u, vector<vector<int> > adj, int color[]){
	color[u] = 1;
	queue<int> Q;
	Q.push(u);
	while (!Q.empty()){
		int a = Q.front(); Q.pop();
		for(int i = 0; i < adj[a].size(); i++){
			if(color[adj[a][i]] == color[a]) return false;
			if(color[adj[a][i]] == -1){
				if(color[a] == 1) color[adj[a][i]] = 2;
				else color[adj[a][i]] = 1;
				Q.push(adj[a][i]);
			}
		}
	}
	return true;
}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int t = 0; cin >> t;
	while (t--){
		vector<vector<int> > adj;
		cin >> n >> m; adj.resize(n+5);
		while (m--){
			int x, y; cin >> x >> y;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		memset(color, -1, sizeof color);
		bool ans = true;
		for(int i = 1; i <= n; i++){
			if(color[i] == -1){
				if(!isBipartite(i, adj, color)){
					ans = false;
					break;
				}
			}
		}
		cout << ans ? "YES" : "NO";
		cout << endl;
	}
	return 0;
}
